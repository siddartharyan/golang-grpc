// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalulatorServiceClient is the client API for CalulatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalulatorServiceClient interface {
	Calculate(ctx context.Context, in *CalulatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error)
	CalculateNumbers(ctx context.Context, in *Request, opts ...grpc.CallOption) (CalulatorService_CalculateNumbersClient, error)
	CalculateAverage(ctx context.Context, opts ...grpc.CallOption) (CalulatorService_CalculateAverageClient, error)
	CalculateMax(ctx context.Context, opts ...grpc.CallOption) (CalulatorService_CalculateMaxClient, error)
}

type calulatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalulatorServiceClient(cc grpc.ClientConnInterface) CalulatorServiceClient {
	return &calulatorServiceClient{cc}
}

func (c *calulatorServiceClient) Calculate(ctx context.Context, in *CalulatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error) {
	out := new(CalculatorResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalulatorService/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calulatorServiceClient) CalculateNumbers(ctx context.Context, in *Request, opts ...grpc.CallOption) (CalulatorService_CalculateNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalulatorService_ServiceDesc.Streams[0], "/calculator.CalulatorService/CalculateNumbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &calulatorServiceCalculateNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalulatorService_CalculateNumbersClient interface {
	Recv() (*CalculatorResponse, error)
	grpc.ClientStream
}

type calulatorServiceCalculateNumbersClient struct {
	grpc.ClientStream
}

func (x *calulatorServiceCalculateNumbersClient) Recv() (*CalculatorResponse, error) {
	m := new(CalculatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calulatorServiceClient) CalculateAverage(ctx context.Context, opts ...grpc.CallOption) (CalulatorService_CalculateAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalulatorService_ServiceDesc.Streams[1], "/calculator.CalulatorService/CalculateAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calulatorServiceCalculateAverageClient{stream}
	return x, nil
}

type CalulatorService_CalculateAverageClient interface {
	Send(*Request) error
	CloseAndRecv() (*CalculatorResponse, error)
	grpc.ClientStream
}

type calulatorServiceCalculateAverageClient struct {
	grpc.ClientStream
}

func (x *calulatorServiceCalculateAverageClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calulatorServiceCalculateAverageClient) CloseAndRecv() (*CalculatorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CalculatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calulatorServiceClient) CalculateMax(ctx context.Context, opts ...grpc.CallOption) (CalulatorService_CalculateMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalulatorService_ServiceDesc.Streams[2], "/calculator.CalulatorService/CalculateMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &calulatorServiceCalculateMaxClient{stream}
	return x, nil
}

type CalulatorService_CalculateMaxClient interface {
	Send(*Request) error
	Recv() (*CalculatorResponse, error)
	grpc.ClientStream
}

type calulatorServiceCalculateMaxClient struct {
	grpc.ClientStream
}

func (x *calulatorServiceCalculateMaxClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calulatorServiceCalculateMaxClient) Recv() (*CalculatorResponse, error) {
	m := new(CalculatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalulatorServiceServer is the server API for CalulatorService service.
// All implementations must embed UnimplementedCalulatorServiceServer
// for forward compatibility
type CalulatorServiceServer interface {
	Calculate(context.Context, *CalulatorRequest) (*CalculatorResponse, error)
	CalculateNumbers(*Request, CalulatorService_CalculateNumbersServer) error
	CalculateAverage(CalulatorService_CalculateAverageServer) error
	CalculateMax(CalulatorService_CalculateMaxServer) error
	mustEmbedUnimplementedCalulatorServiceServer()
}

// UnimplementedCalulatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalulatorServiceServer struct {
}

func (UnimplementedCalulatorServiceServer) Calculate(context.Context, *CalulatorRequest) (*CalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedCalulatorServiceServer) CalculateNumbers(*Request, CalulatorService_CalculateNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateNumbers not implemented")
}
func (UnimplementedCalulatorServiceServer) CalculateAverage(CalulatorService_CalculateAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateAverage not implemented")
}
func (UnimplementedCalulatorServiceServer) CalculateMax(CalulatorService_CalculateMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateMax not implemented")
}
func (UnimplementedCalulatorServiceServer) mustEmbedUnimplementedCalulatorServiceServer() {}

// UnsafeCalulatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalulatorServiceServer will
// result in compilation errors.
type UnsafeCalulatorServiceServer interface {
	mustEmbedUnimplementedCalulatorServiceServer()
}

func RegisterCalulatorServiceServer(s grpc.ServiceRegistrar, srv CalulatorServiceServer) {
	s.RegisterService(&CalulatorService_ServiceDesc, srv)
}

func _CalulatorService_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalulatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalulatorServiceServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalulatorService/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalulatorServiceServer).Calculate(ctx, req.(*CalulatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalulatorService_CalculateNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalulatorServiceServer).CalculateNumbers(m, &calulatorServiceCalculateNumbersServer{stream})
}

type CalulatorService_CalculateNumbersServer interface {
	Send(*CalculatorResponse) error
	grpc.ServerStream
}

type calulatorServiceCalculateNumbersServer struct {
	grpc.ServerStream
}

func (x *calulatorServiceCalculateNumbersServer) Send(m *CalculatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalulatorService_CalculateAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalulatorServiceServer).CalculateAverage(&calulatorServiceCalculateAverageServer{stream})
}

type CalulatorService_CalculateAverageServer interface {
	SendAndClose(*CalculatorResponse) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type calulatorServiceCalculateAverageServer struct {
	grpc.ServerStream
}

func (x *calulatorServiceCalculateAverageServer) SendAndClose(m *CalculatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calulatorServiceCalculateAverageServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalulatorService_CalculateMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalulatorServiceServer).CalculateMax(&calulatorServiceCalculateMaxServer{stream})
}

type CalulatorService_CalculateMaxServer interface {
	Send(*CalculatorResponse) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type calulatorServiceCalculateMaxServer struct {
	grpc.ServerStream
}

func (x *calulatorServiceCalculateMaxServer) Send(m *CalculatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calulatorServiceCalculateMaxServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalulatorService_ServiceDesc is the grpc.ServiceDesc for CalulatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalulatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalulatorService",
	HandlerType: (*CalulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _CalulatorService_Calculate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateNumbers",
			Handler:       _CalulatorService_CalculateNumbers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CalculateAverage",
			Handler:       _CalulatorService_CalculateAverage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CalculateMax",
			Handler:       _CalulatorService_CalculateMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
